# aliases

alias i="ipython"
alias jnb="jupyter notebook"
alias jnbp="jupyter notebook --port=8888 --no-browser"


if [[ "$OSTYPE" == "darwin"* ]]; then
    alias ls="ls -Gp"
else
    alias ls="ls -p --color=auto"
fi

alias vi="vim"
# alias act="conda activate"

# git aliases
alias gs="git status"
alias ga="git add --all"
alias gc="git commit -m"
alias gsa="git status; git add --all"
alias gd="git diff --staged"
alias gdt="git difftool --staged"
alias gps="git push"
alias gpl="git pull"

# delete branches
function gbdel {
    if [ -z "$1" ]; then
        echo "Error: No branch name provided"
        return 1
    fi


    local branch="$1"
    echo "Deleting branch: $branch"
    git branch -d $branch
    git push origin -d $branch
}


# safety first
alias rm="rm -i" 

# List only directories
alias lsd='ls -l | grep "^d"'

# Tree with 2 levels by default
alias tree='tree -L 2'

#This is OS x only
alias notify='terminal-notifier -message "Yay!" -title "Task done" -sound default'
alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# draw.io cli
alias draw.io='/Applications/draw.io.app/Contents/MacOS/draw.io'

# conda
alias ca='conda activate'

# docker
alias dcls='docker container ls'

function dex() {
    docker exec -it $1 bash
}

# Function to compress an MP4 video
function compressmp4() {
    if [ -z "$1" ]; then
        echo "Error: No input file provided"
        echo "Usage: compress_mp4 <input_file.mp4>"
        return 1
    fi

    local input_file="$1"
    local filename=$(basename -- "$input_file")
    local name="${filename%.*}"
    local output_file="${name}-compressed.mp4"

    echo "Compressing $input_file to $output_file"
    ffmpeg -i "$input_file" -vcodec libx264 -crf 23 "$output_file"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully"
    else
        echo "Error: Compression failed"
    fi
}

# Function to compress a GIF file
function compressgif() {
    local level="low"
    local input_file=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --level)
                level="$2"
                shift 2
                ;;
            *)
                input_file="$1"
                shift
                ;;
        esac
    done

    if [ -z "$input_file" ]; then
        echo "Error: No input file provided"
        echo "Usage: compressgif [--level low|medium|high] <input_file.gif>"
        return 1
    fi

    local filename=$(basename -- "$input_file")
    local name="${filename%.*}"
    local output_file="${name}-compressed.gif"

    echo "Compressing $input_file to $output_file"

    local optimize="3"
    local colors="32"
    local lossy=""
    local scale=""

    case "$level" in
        low)
            lossy="90"
            scale="1.0"
            ;;
        medium)
            lossy="100"
            scale="0.9"
            ;;
        high)
            lossy="100"
            scale="0.8"
            ;;
        *)
            echo "Error: Invalid compression level. Use low, medium, or high."
            return 1
            ;;
    esac

    gifsicle --optimize="$optimize" --colors="$colors" --lossy="$lossy" --scale="$scale" "$input_file" -o "$output_file"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully"
    else
        echo "Error: Compression failed"
    fi
}
